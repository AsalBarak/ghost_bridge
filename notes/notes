

"Pick random gesture")

"Show random gesture"


(DefineLink
   (DefinedPredicateNode "Speech start")
	(SequentialAndLink
		(EqualLink
			(SetLink chat-listen)
			(GetLink (StateLink chat-state (VariableNode "$x"))))
 		(PutLink (DefinedPredicateNode "Show random gesture")
    		(ConceptNode "listening"))))

		

(define g
      (GetLink
         (VariableNode "$expr")
         (EvaluationLink
            (PredicateNode "Emotion-expression")
            (ListLink (ConceptNode "bored") (VariableNode "$expr")))))

(cog-execute! g)
(cog-execute! p)

(define p
	(Get
		(VariableList (Variable "$prob") (Variable "$expr"))
		(And
			(Evaluation (Predicate "Emotion-expression")
				(ListLink (Concept "bored") (Variable "$expr")))
			(State (ListLink
				(Concept "bored") (Variable "$expr") (Schema "probability"))
				(Variable "$prob"))
		)))

(cog-execute! (RandomChoice p))

(cog-incoming-set
 (ListLink (Concept "bored") (Concept "happy") (Schema "probability")))

(cog-logger-set-stdout #t)
(cog-logger-set-level "fine")

8 ...


def ex(name):
	if name == "noop":
		return "nada"
	return "done"


      elif kwargs["event"] == "face_study_saccade":
         if random.random() <
self.blackboard["face_study_probabilities"]:
            yield True


      if kwargs["event"] == "glance_new_face":
line 590

gesture-timestamp

who calls "Interact with face" ??
OK
new-arrival!! ??
neutral-speech ???


insert two new faces at once:

(make-new-face "1")(make-new-face "2")

Publish expression:  surprised
--- Look at newly arrived person
--- Ignoring new person


i689
set print thread-events off

(DefinedSchemaNode "Current interaction target")

#4  isA (super=77, sub=43, this=0x0)
    at
/home/linas/src/novamente/src/atomspace-git/opencog/atomspace/ClassServer.h:153

(State chat-state chat-start)

(DefinedPredicate "Speech started?")
(DefinedPredicate "chatbot is talking")

fix this:
(DefinedPredicate "Speech ongoing?")

(timestamp-template "expression")

Time to change expression

      (SequentialOrLink
         (NotLink (DefinedPredicateNode "Time to change expression"))
         (DefinedPredicateNode "Show positive expression")
      )
      (SequentialOrLink
         (NotLink (DefinedPredicateNode "Time to make gesture"))
         (DefinedPredicateNode "Pick random positive gesture"))


(make-new-face "1")
(State chat-state chat-start)
(State chat-state chat-stop)
(remove-face "1")

--- Go to sleep. during chat .. wtf
Go to sleep
Nothing is happening -- runs becaause
nteract with peopl returned false ...

ahh 
(DefinedPredicateNode "Interact with face") returns false ...!??

--------------------
affect 

chat-affect
chatbot is happy

(define max
(Get (State (Schema "time_to_change_face_target_max") (Variable "$max"))))

(define min
(Get (State (Schema "time_to_change_face_target_min") (Variable "$min"))))

(cog-evaluate! (DefinedPredicate "Bored too long"))
(cog-execute! (DefinedSchema "get bored timestamp"))
(cog-execute!  (Minus (Time) (DefinedSchema "get bored timestamp")))

(cog-evaluate!  (GreaterThan
	(Minus (Time) (DefinedSchema "get bored timestamp"))
	(Get (State (Schema "time_to_sleep_max") (Variable "$max")))
))

(cog-evaluate!  (GreaterThan
	(Get (State (Schema "time_to_sleep_min") (Variable "$min")))
	(Minus (Time) (DefinedSchema "get bored timestamp"))
))



line 990

(make-new-face "1")
(State chat-state chat-start)
(State chat-state chat-stop)
(remove-face "1")

line 1092

            (DefinedPredicate "Interaction requested")
            (DefinedPredicate "New arrival sequence")
+       (DefinedPredicate "If sleeping then wake")

      self.facetrack.look_pub.publish(look_around_trg)

search_for_attention_targets

search_for_attention_x"

line 134 ff
search_for_attention_duration_min = 1
search_for_attention_duration_max = 4
search_for_attention_x = 1, 1, 1, 1, 1, 1, 1, 1
search_for_attention_y = 0.1, -0.3, 0.2, -0.1, -0.4, -0.2, 0.05, 0.35
search_for_attention_z = 0, 0, 0, 0, 0, 0, 0, 0


look_at_point

            (True (Put (State soma-state (Variable "$x"))
               (SetLink soma-bored)))

attn-search

====================================================================
gc.collect()


gc.collect()
print "duuude", len( gc.get_objects())

gc.set_debug(gc.DEBUG_STATS)

(define (cnt-all)
      (define cnt 0)
      (define (ink a) (set! cnt (+ cnt 1)) #f)
      (define (cnt-type x) (cog-map-type ink x))
      (map cnt-type (cog-get-types))
      cnt)

6731846

(define (cnt-top)
      (define a-cnt 0)
      (define t-cnt 0)
      (define (ink a)
			(set! a-cnt (+ a-cnt 1))
			(if (eq? 0 (length (cog-incoming-set a)))
				(set! t-cnt (+ t-cnt 1)))
			#f)
      (define (cnt-type x) (cog-map-type ink x))
      (map cnt-type (cog-get-types))
		(display (format "total ~A  top ~A\n" a-cnt t-cnt))
      a-cnt)


(define (cnt-top)
      (define a-cnt 0)
      (define t-cnt 0)
      (define (ink a)
			(set! a-cnt (+ a-cnt 1))
			(if (eq? 0 (length (cog-incoming-set a)))
				(set! t-cnt (+ t-cnt 1)))
			#f)
      (define (cnt-type x) 
			(set! a-cnt 0)
			(set! t-cnt 0)
			(cog-map-type ink x)
			(if (< 100 a-cnt)
				(display (format "type: ~A total ~A  top ~A\n" x a-cnt t-cnt)))
		)
      (map cnt-type (cog-get-types))
      a-cnt)


type: NumberNode total 5918559  top 4969819
type: SetLink total 934457  top 934447
type: ListLink total 12223  top 11901

(define (free-up ty)
      (define (del a)
			(if (eq? 0 (length (cog-incoming-set a)))
				(cog-delete a))
			#f)
	(cog-map-type del ty)
)

(cnt-all) 6731846

(free-up 'NumberNode)
	
(cnt-all) 1914993

(free-up 'SetLink)

(cnt-all) 989161

(free-up 'ListLink) (cnt-all)

(free-up 'NumberNode)


(define (sh ty)
      (define (dosh a)
			(if (eq? 0 (length (cog-incoming-set a)))
				(display a))
			#f)
	(cog-map-type dosh ty)
)

cnt-all now idles at 1.5K to 1.7K

(cnt-top)
type: ConceptNode total 244  top 0
type: ListLink total 522  top 0
type: StateLink total 509  top 429
type: EvaluationLink total 360  top 314


Bug -- TrueLink is not executing in a temp space, but in the main
space...

(map cog-delete
(cog-incoming-set (GroundedPredicateNode "py:look_at_face")))
(map cog-delete
(cog-incoming-set (GroundedPredicateNode "py:glance_at_face")))
(free-up 'ConceptNode)


(cnt-all)  2690
2441

(cnt-all) 1888

(cnt-top)
type: NumberNode total 228  top 143
type: ListLink total 333  top 1
type: StateLink total 509  top 429



====================================================================

wyl.selector(
                  owyl.sequence(
                     self.dice_roll(event="face_study_saccade"),
self.face_study_saccade(id="current_face_target",
trigger="people_in_scene")

face_study_probabilities

maybe call evl.explore_saccade() ???

is face_study_saccade still used ??? Yes it is .. so ... ?

self.facetrack.study_face is the manual one ... 
self.facetrack = FaceTrack

   def study_face(self, faceid, howlong):
      logger.info("study: " + str(faceid) + " for " + str(howlong) + "
seconds")
      self.glance_at = faceid
      self.glance_howlong = howlong

ace_study_right_ear

(define (run-face-test)
	(define face-id 0)

	(define (chat-for-a-while n)
		(do ((i 1 (1+ i))) ((> i n))
			(StateLink chat-state chat-start)
			(sleep 1)
			(StateLink chat-state chat-stop)
			(sleep 2))
	)

	(define (come-and-go)
		(sleep 2)
		(set! face-id (+ 2 face-id))

		; Add one face 
		(make-new-face (number->string face-id))
		(sleep 3)
		(chat-for-a-while 6)

		; Add a second face 
		(make-new-face (number->string (+ 1 face-id)))
		(chat-for-a-while 6)
		(sleep 3)

		; Remove first face
		(remove-face (number->string face-id))
		(chat-for-a-while 6)

		; Remove second face
		(remove-face (number->string (+ 1 face-id)))

		; Let her get bored and look around and sleep.
		(sleep 90)

		; Loop forever.
		(come-and-go)
	)

	; Run in own thread.
	(call-with-new-thread come-and-go)
)
x
=======================================================================
 (get-total-atoms-in-atomspace)

 (print-toplevel-counts)
type: NumberNode total 137  top 75
type: ListLink total 313  top 1
type: StateLink total 382  top 309

guile>  (get-total-atoms-in-atomspace)
1563

(run-face-test)

(get-total-atoms-in-atomspace)
1565

(print-toplevel-counts)
type: ListLink total 310  top 0
type: StateLink total 402  top 329

